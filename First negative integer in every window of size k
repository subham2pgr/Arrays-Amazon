Note:Plz refer the Sliding Window from theory NB and then go ahead with this program and also there is a small change in this program which differs from GeeksForGeeks so plz refer this program


#include <bits/stdc++.h>
using namespace std;
// function to find the first negative  
// integer in every window of size k 
void printFirstNegativeInteger(int arr[], int n, int k) 
{ 
    // A Double Ended Queue, Di that will store indexes of  
    // useful array elements for the current window of size k. 
    // The useful elements are all negative integers. 
    deque<int>  Di; 
   
    /* Process first k (or first window) elements of array */
    int i; 
    for (i = 0; i < k; i++) 
        // Add current element at the rear of Di 
        // if it is a negative integer 
        if (arr[i] < 0) 
            Di.push_back(i); 
      
    // Process rest of the elements, i.e., from arr[k] to arr[n-1] 
    for ( ; i < n; i++) 
    { 
        // if Di is not empty then the element at the 
        // front of the queue is the first negative integer 
        // of the previous window 
        if (!Di.empty()) 
            cout << arr[Di.front()] << " "; 
          
        // else the window does not have a 
        // negative integer 
        else
            cout << "0" << " "; 
   
        // Remove the elements which are out of this window 
        while ( (!Di.empty()) && Di.front() == (i-k)) 
            Di.pop_front();  // Remove from front of queue 
   
        // Add current element at the rear of Di 
        // if it is a negative integer 
        if (arr[i] < 0) 
            Di.push_back(i); 
    } 
   
    // Print the first negative  
    // integer of last window 
    if (!Di.empty()) 
           cout << arr[Di.front()] << " "; 
    else
        cout << "0" << " ";        
      
} 
   
// Driver program to test above functions 
int main() 
{ 
    int arr[] = {-8, 2, 3, -6, 10}; 
    int n = sizeof(arr)/sizeof(arr[0]); 
    int k = 2; 
    printFirstNegativeInteger(arr, n, k); 
    return 0; 
} 
