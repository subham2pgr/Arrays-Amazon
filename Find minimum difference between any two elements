Method 2 (Efficient: O(n Log n)
The idea is to use sorting. Below are steps.
1) Sort array in ascending order. This step takes O(n Log n) time.
2) Initialize difference as infinite. This step takes O(1) time.
3) Compare all adjacent pairs in sorted array and keep track of minimum difference. This step takes O(n) time.

Below is implementation of above idea.

filter_none
edit
play_arrow

brightness_4
// C++ program to find minimum difference between 
// any pair in an unsorted array 
#include <bits/stdc++.h> 
using namespace std; 
  
// Returns minimum difference between any pair 
int findMinDiff(int arr[], int n) 
{ 
   // Sort array in non-decreasing order 
   sort(arr, arr+n); 
  
   // Initialize difference as infinite 
   int diff = INT_MAX; 
  
   // Find the min diff by comparing adjacent 
   // pairs in sorted array 
   for (int i=0; i<n-1; i++) 
      if (arr[i+1] - arr[i] < diff) 
          diff = arr[i+1] - arr[i]; 
  
   // Return min diff 
   return diff; 
} 
  
// Driver code 
int main() 
{ 
   int arr[] = {1, 5, 3, 19, 18, 25}; 
   int n = sizeof(arr)/sizeof(arr[0]); 
   cout << "Minimum difference is " << findMinDiff(arr, n); 
   return 0; 
} 

Output :
Minimum difference is 1
