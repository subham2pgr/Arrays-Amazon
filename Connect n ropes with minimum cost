A simple implementation with STL in C++
Following is a simple implementation that uses priority_queue available in STL. Thanks to Pango89 for providing below code.
filter_none
edit
play_arrow

brightness_4
#include <iostream> 
#include <queue> 
  
using namespace std; 
  
int minCost(int arr[], int n) 
{ 
    // Create a priority queue ( http:// www.cplusplus.com/reference/queue/priority_queue/ ) 
    // By default 'less' is used which is for decreasing order 
    // and 'greater' is used for increasing order 
    priority_queue<int, vector<int>, greater<int> > pq(arr, arr + n); 
  
    // Initialize result 
    int res = 0; 
  
    // While size of priority queue is more than 1 
    while (pq.size() > 1) { 
        // Extract shortest two ropes from pq 
        int first = pq.top(); 
        pq.pop(); 
        int second = pq.top(); 
        pq.pop(); 
  
        // Connect the ropes: update result and 
        // insert the new rope to pq 
        res += first + second; 
        pq.push(first + second); 
    } 
  
    return res; 
} 
  
// Driver program to test above function 
int main() 
{ 
    int len[] = { 4, 3, 2, 6 }; 
    int size = sizeof(len) / sizeof(len[0]); 
    cout << "Total cost for connecting ropes is " << minCost(len, size); 
    return 0; 
} 

Output:
Total cost for connecting ropes is 29


Example of priority queue

int main ()
{
  int myints[]= {10,60,50,20};

  std::priority_queue<int> first;
  std::priority_queue<int> second (myints,myints+4);
  std::priority_queue<int, std::vector<int>, std::greater<int> >
                            third (myints,myints+4);
  return 0;
}
