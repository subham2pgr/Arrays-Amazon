
//Dont consider this soln
Count Occurences of Anagrams - See the geeksforggeks soln the efficient approach which is same find the occurences of anagrams

An Efficient Solution is to use count array to check for anagrams, we can construct current count window from previous window in O(1) time using sliding window concept.

filter_none
edit
play_arrow

brightness_4
// An efficient Java program to count anagrams of a 
// pattern in a text. 
import java.io.*; 
import java.util.*; 
  
public class GFG { 
    final static int MAX_CHAR = 256
  
    // Function to find if two strings are equal 
    static boolean isCountZero(int[] count) 
    { 
        for (int i = 0; i < MAX_CHAR; i++) 
            if (count[i] != 0) 
                return false; 
        return true; 
    } 
  
    static int countAnagrams(String text, String word) 
    { 
        int N = text.length(); 
        int n = word.length(); 
  
        // Check for first window. The idea is to 
        // use single count array to match counts 
        int[] count = new int[MAX_CHAR]; 
        for (int i = 0; i < n; i++) 
            count[word.charAt(i)]++; 
        for (int i = 0; i < n; i++) 
            count[text.charAt(i)]--; 
  
        // If first window itself is anagram 
        int res = 0; 
        if (isCountZero(count)) 
            res++; 
  
        for (int i = n; i < N; i++) { 
  
            // Add last character of current 
            // window 
            count[text.charAt(i)]--; 
  
            // Remove first character of previous 
            // window. 
            count[text.charAt(i - n)]++; 
  
            // If count array is 0, we found an 
            // anagram. 
            if (isCountZero(count)) 
                res++; 
        } 
        return res; 
    } 
  
    // Driver code 
    public static void main(String args[]) 
    { 
        String text = "forxxorfxdofr"; 
        String word = "for"; 
        System.out.print(countAnagrams(text, word)); 
    } 
} 
Output:
3

why o(1) time?
https://www.includehelp.com/icp/count-occurrences-of-anagrams.aspx

#include <iostream>
#include<unordered_map>
using namespace std;
bool check(string a,string b){
    unordered_map<char,int>m;
    for(int i=0;i<a.length();i++)
		m[a[i]]++;
	for(int i=0;i<b.length();i++)
		m[b[i]]--;
		for(auto it=m.begin();it!=m.end();it++){
		    if(it->second!=0){
		        return false;
		    }
		}
	return true;
}
int countAnagrams(string a,string b){
    int count=0;
    for(int i=0;i<a.length()-b.length()+1;i++){
        if(check(a.substr(i,b.length()),b)){
            count++;
        }
    }
    return count;
}

int main() 
{ 
  string text = "forxxorfxdofr"; 
  string word = "for"; 
  cout<<countAnagrams(text, word); 
  return 0; 
}
