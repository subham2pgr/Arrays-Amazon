Find missing number in another array which is shuffled copy
Given an array ‘arr1’ of n positive integers. Contents of arr1[] are copied to another array ‘arr2’, but numbers are shuffled and one element is removed. Find the missing element(without using any extra space and in O(n) time complexity).

Examples :

Input : arr1[] = {4, 8, 1, 3, 7}, 
        arr2[] = {7, 4, 3, 1}
Output : 8

Input : arr1[] = {12, 10, 15, 23, 11, 30}, 
        arr2[] = {15, 12, 23, 11, 30}
Output : 10
Recommended: Please solve it on “PRACTICE” first, before moving on to the solution.
A simple solution is to one by one consider every element of first array and search in second array. As soon as we find a missing element, we return. Time complexity of this solution is O(n2)

An efficient solution is based on XOR. The combined occurrence of each element is twice, one in ‘arr1’ and other in ‘arr2’, except one element which only has a single occurrence in ‘arr1’. We know that (a Xor a) = 0. So, simply XOR the elements of both the arrays. The result will be the missing number.
filter_none
edit
play_arrow

brightness_4
// C++ implementation to find the 
// missing number in shuffled array 
// C++ implementation to find the 
// missing number in shuffled array 
#include <bits/stdc++.h> 
using namespace std; 
  
// Returns the missing number 
// Size of arr2[] is n-1 
int missingNumber(int arr1[], int arr2[],  
                                   int n) 
{ 
    // Missing number 'mnum' 
    int mnum = 0; 
  
    // 1st array is of size 'n' 
    for (int i = 0; i < n; i++) 
        mnum = mnum ^ arr1[i]; 
  
    // 2nd array is of size 'n - 1' 
    for (int i = 0; i < n - 1; i++) 
        mnum = mnum ^ arr2[i]; 
  
    // Required missing number 
    return mnum; 
} 
  
// Driver Code 
int main() 
{ 
    int arr1[] = {4, 8, 1, 3, 7}; 
    int arr2[] = {7, 4, 3, 1}; 
    int n = sizeof(arr1) / sizeof(arr1[0]); 
    cout << "Missing number = "
        << missingNumber(arr1, arr2, n); 
    return 0; 
} 

Output:
Missing number = 8
Complexity: O(n) time complexity and O(1) extra space.
