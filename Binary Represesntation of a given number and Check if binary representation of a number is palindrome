Refer the Notes for Binary Represesntation of a given number and then study the Check if binary representation of a number is palindrome
https://www.interviewbit.com/problems/binary-representation/
Algorithm:
isPalindrome(x)
1) Find number of bits in x using sizeof() operator.
2) Initialize left and right positions as 1 and n respectively.
3) Do following while left ‘l’ is smaller than right ‘r’.
..…..a) If bit at position ‘l’ is not same as bit at position ‘r’, then return false.
..…..b) Increment ‘l’ and decrement ‘r’, i.e., do l++ and r–-.
4) If we reach here, it means we didn’t find a mismatching bit.

To find the bit at a given position, we can use the idea similar to this post. The expression “x & (1 << (k-1))” gives us non-zero value if bit at k’th position from right is set and gives a zero value if if k’th bit is not set.

Following is the implementation of the above algorithm.


// C++ Program to Check if binary representation 
// of a number is palindrome 
#include<iostream> 
using namespace std; 
  
// This function returns true if k'th bit in x  
// is set (or 1). For example if x (0010) is 2  
// and k is 2, then it returns true 
bool isKthBitSet(unsigned int x, unsigned int k) 
{ 
    return (x & (1 << (k - 1))) ? true : false; 
} 
  
// This function returns true if binary  
// representation of x is palindrome. 
// For example (1000...001) is paldindrome 
bool isPalindrome(unsigned int x) 
{ 
    int l = 1; // Initialize left position 
    int r = sizeof(unsigned int) * 8; // initialize right position 
  
    // One by one compare bits 
    while (l < r) 
    { 
        if (isKthBitSet(x, l) != isKthBitSet(x, r)) 
            return false; 
        l++; r--; 
    } 
    return true; 
} 
  
// Driver Code 
int main() 
{ 
    unsigned int x = 1 << 15 + 1 << 16; 
    cout << isPalindrome(x) << endl; 
    x = 1 << 31 + 1; 
    cout << isPalindrome(x) << endl; 
    return 0; 
} 

Output:
1
1
