https://www.youtube.com/watch?v=J6o_Wz-UGvc
class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        int n=nums.size();
        //Check for Empty Input
        if(n==0 || n<k){
            return {};
        }
        //Here using double ended queue with atmost size equal to k
        deque<int> q;
        //Result Array Storing the output with size of (n-k+1)
        vector<int> ans(n-k+1);
        for(int i=0;i<n;i++){
            /* Here Idea is that to remove all smaller elements that comes before any
                larger element in present window.
                Here, We are not removing any smaller element that comes after larger element
				because it may become larger element for another window.
            */
            while(!q.empty() && nums[q.back()]<=nums[i]){
                q.pop_back();
            }
            // pushing new elements in queue
            q.push_back(i);
            //Storing Maximum element in result
            if(i>=k-1){
                // Here Always larger element will on the front of queue
                ans[i-k+1]=nums[q.front()];
                // if any element is out of the context of current window, remove it
                if(q.front()==i-k+1){
                    q.pop_front();
                }
            }
        }
        return ans;
        
    }
};
