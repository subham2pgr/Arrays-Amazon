The above solution can be optimized further. Instead of doing binary search in every row, we first check whether the row has more 1s than max so far. If the row has more 1s, then only count 1s in the row. Also, to count 1s in a row, we don’t do binary search in complete row, we do search in before the index of last max.


 
Following is an optimized version of the above solution.
filter_none
edit
play_arrow

brightness_4
#include <bits/stdc++.h> 
using namespace std; 
  
// The main function that returns index 
// of row with maximum number of 1s.  
int rowWithMax1s(bool mat[R][C])  
{  
    int i, index;  
  
    // Initialize max using values from first row.  
    int max_row_index = 0;  
    int max = first(mat[0], 0, C - 1);  
  
    // Traverse for each row and count number of 1s  
    // by finding the index of first 1  
    for (i = 1; i < R; i++)  
    {  
        // Count 1s in this row only if this row  
        // has more 1s than max so far  
  
        // Count 1s in this row only if this row  
        // has more 1s than max so far  
        if (max != -1 && mat[i][C - max - 1] == 1)  
        {  
            // Note the optimization here also  
            index = first (mat[i], 0, C - max);  
  
            if (index != -1 && C - index > max)  
            {  
                max = C - index;  
                max_row_index = i;  
            }  
        }  
        else 
        {  
            max = first(mat[i], 0, C - 1);  
        }  
    }  
    return max_row_index;  
}  
  
// This code is contributed by rathbhupendra 

The worst case time complexity of the above optimized version is also O(mLogn), the will solution work better on average. Thanks to Naveen Kumar Singh for suggesting the above solution.
The worst case of the above solution occurs for a matrix like following.
0 0 0 … 0 1
0 0 0 ..0 1 1
0 … 0 1 1 1
….0 1 1 1 1
